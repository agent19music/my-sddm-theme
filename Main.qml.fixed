import QtQuick 2.15
import QtQuick.Controls 2.15
import QtGraphicalEffects 1.15
import SddmComponents 2.0

Rectangle {
    id: root
    width: Screen.width
    height: Screen.height
    color: "#000000"
    
    // Hyprlock colors - matching your theme/colors.conf
    readonly property color murderColor: "#a31621"
    readonly property color accentColor: "#FCF7F8"
    readonly property color bgDarkColor: "#121212"
    readonly property string fontFamily: "Maple Mono NF"
    
    Connections {
        target: sddm
        
        function onLoginSucceeded() {}
        
        function onLoginFailed() {
            passwordField.text = ""
            failMessage.visible = true
            failAnimation.start()
        }
    }
    
    // Background image with hyprlock effects
    Image {
        id: backgroundImage
        anchors.fill: parent
        source: "/home/uzski/Downloads/zen/darkredstevelacy.png"
        fillMode: Image.PreserveAspectCrop
        cache: false
        asynchronous: true
        
        // Apply blur matching hyprlock settings
        layer.enabled: true
        layer.effect: GaussianBlur {
            radius: 12  // blur_size = 4, blur_passes = 3
            samples: 32
            transparentBorder: true
        }
    }
    
    // Color overlay and adjustments
    Rectangle {
        anchors.fill: parent
        color: murderColor
        opacity: 0.2  // brightness adjustment
    }
    
    // Contrast/brightness adjustment overlay
    BrightnessContrast {
        anchors.fill: backgroundImage
        source: backgroundImage
        brightness: -0.2  // 0.8 brightness in hyprlock = -0.2 here
        contrast: 0.3     // 1.3 contrast in hyprlock = 0.3 here
    }
    
    // Top welcome text - Japanese message like in hyprlock
    Text {
        id: welcomeText
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
        anchors.topMargin: parent.height * 0.15  // position = 0, -570 relative positioning
        text: "愛してる、一秒一秒、毎分、毎時間、毎日"
        color: murderColor
        font.pixelSize: 32
        font.family: fontFamily
        font.bold: true
        layer.enabled: true
        layer.effect: DropShadow {
            transparentBorder: true
            radius: 4
            samples: 9
            color: "#80000000"
        }
    }
    
    // Center area container
    Item {
        anchors.centerIn: parent
        width: 400
        height: 400
        
        // Current time display - matching hyprlock exactly
        Text {
            id: timeDisplay
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            anchors.verticalCenterOffset: -35
            text: Qt.formatTime(new Date(), "HH:mm:ss")
            color: accentColor
            font.pixelSize: 64
            font.family: fontFamily
            font.bold: true
            
            layer.enabled: true
            layer.effect: DropShadow {
                transparentBorder: true
                radius: 4
                samples: 9
                color: "#80000000"
            }
        }
        
        // Current song placeholder (since we can't run the script in SDDM)
        Text {
            id: songDisplay
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            anchors.verticalCenterOffset: -107
            text: ""  // Empty by default or you can add a static message
            color: accentColor
            font.pixelSize: 17
            font.family: fontFamily
            visible: text !== ""
            
            layer.enabled: true
            layer.effect: DropShadow {
                transparentBorder: true
                radius: 4
                samples: 9
                color: "#80000000"
            }
        }
        
        // User avatar - circular like hyprlock
        Image {
            id: userAvatar
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            anchors.verticalCenterOffset: 100
            width: 100
            height: 100
            source: "/home/uzski/Downloads/ronaldo-shadow.jpg"
            fillMode: Image.PreserveAspectCrop
            
            layer.enabled: true
            layer.effect: OpacityMask {
                maskSource: Rectangle {
                    width: userAvatar.width
                    height: userAvatar.height
                    radius: width / 2
                    color: "white"
                }
            }
            
            Rectangle {
                anchors.fill: parent
                radius: width / 2
                color: "transparent"
                border.color: accentColor
                border.width: 2
                opacity: 0.5
            }
            
            // Shadow effect
            DropShadow {
                anchors.fill: userAvatar
                source: userAvatar
                radius: 8
                samples: 17
                color: "#80000000"
                transparentBorder: true
            }
        }
    }
    
    // Password input field - matching hyprlock exactly
    Item {
        id: passwordContainer
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottom: parent.bottom
        anchors.bottomMargin: parent.height * 0.08  // position = 0, 50 valign = bottom
        width: 300
        height: 50
        
        Rectangle {
            id: passwordBackground
            anchors.fill: parent
            radius: 20
            color: bgDarkColor
            border.width: 2
            border.color: passwordField.activeFocus ? murderColor : Qt.rgba(252, 247, 248, 0.3)
            
            layer.enabled: true
            layer.effect: DropShadow {
                transparentBorder: true
                radius: 8
                samples: 17
                color: "#80000000"
            }
            
            Behavior on border.color {
                ColorAnimation { duration: 300 }
            }
        }
        
        TextField {
            id: passwordField
            anchors.fill: parent
            anchors.margins: 2
            echoMode: TextInput.Password
            placeholderText: "Password..."
            font.pixelSize: 16
            font.family: fontFamily
            font.italic: true
            color: accentColor
            placeholderTextColor: Qt.rgba(252, 247, 248, 0.5)
            horizontalAlignment: TextInput.AlignHCenter
            verticalAlignment: TextInput.AlignVCenter
            
            background: Rectangle {
                color: "transparent"
            }
            
            Keys.onReturnPressed: {
                var sessionIndex = (sessionModel && sessionModel.lastIndex !== undefined && sessionModel.lastIndex >= 0) ? sessionModel.lastIndex : 0
                var username = (userModel && userModel.lastUser) ? userModel.lastUser : ""
                sddm.login(username, passwordField.text, sessionIndex)
            }
            
            onTextChanged: {
                failMessage.visible = false
            }
        }
        
        // Fail message
        Text {
            id: failMessage
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top: parent.bottom
            anchors.topMargin: 10
            text: "Is it really you (1)"
            color: murderColor
            font.pixelSize: 14
            font.family: fontFamily
            font.italic: true
            visible: false
            
            SequentialAnimation {
                id: failAnimation
                NumberAnimation {
                    target: passwordContainer
                    property: "x"
                    from: passwordContainer.x - 10
                    to: passwordContainer.x + 10
                    duration: 50
                }
                NumberAnimation {
                    target: passwordContainer
                    property: "x"
                    from: passwordContainer.x + 10
                    to: passwordContainer.x - 10
                    duration: 50
                }
                NumberAnimation {
                    target: passwordContainer
                    property: "x"
                    from: passwordContainer.x - 10
                    to: passwordContainer.x
                    duration: 50
                }
            }
        }
    }
    
    // Hidden session selector (required by SDDM but invisible)
    ComboBox {
        id: session
        visible: false
        model: sessionModel
        // Safely handle undefined or null lastIndex
        Component.onCompleted: {
            if (sessionModel && sessionModel.lastIndex !== undefined && sessionModel.lastIndex >= 0) {
                currentIndex = sessionModel.lastIndex
            } else {
                currentIndex = 0
            }
        }
    }
    
    // Hidden username field (uses last user)
    property string userName: (userModel && userModel.lastUser) ? userModel.lastUser : ""
    
    // Timer for updating clock
    Timer {
        interval: 1000
        running: true
        repeat: true
        onTriggered: {
            timeDisplay.text = Qt.formatTime(new Date(), "HH:mm:ss")
        }
    }
    
    // Power buttons - minimal and matching hyprlock style
    Row {
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        anchors.margins: 30
        spacing: 15
        opacity: 0.7
        
        // Power off
        MouseArea {
            width: 32
            height: 32
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: sddm.powerOff()
            
            Rectangle {
                anchors.fill: parent
                radius: 16
                color: "transparent"
                border.color: accentColor
                border.width: 1
                opacity: parent.containsMouse ? 1 : 0.5
                
                Behavior on opacity {
                    NumberAnimation { duration: 200 }
                }
            }
            
            Text {
                anchors.centerIn: parent
                text: "⏻"
                color: accentColor
                font.pixelSize: 16
            }
        }
        
        // Reboot
        MouseArea {
            width: 32
            height: 32
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: sddm.reboot()
            
            Rectangle {
                anchors.fill: parent
                radius: 16
                color: "transparent"
                border.color: accentColor
                border.width: 1
                opacity: parent.containsMouse ? 1 : 0.5
                
                Behavior on opacity {
                    NumberAnimation { duration: 200 }
                }
            }
            
            Text {
                anchors.centerIn: parent
                text: "↻"
                color: accentColor
                font.pixelSize: 16
            }
        }
    }
    
    Component.onCompleted: {
        passwordField.forceActiveFocus()
    }
}
